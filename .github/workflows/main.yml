# This is a basic workflow to help you get started with Actions

name: Build M2aia for Ubuntu 20.04 (Qt 5.12.8)

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main", "develop", "master" ]
  pull_request:
    branches: [ "main", "master" ]
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  ubuntu2004:
    # The type of runner that the job will run on
    runs-on: self-hosted
    env:
      UBUNTU_VERSION: 20.04
      M2AIA_BRANCH: master

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: 1. Clone m2aia-docker
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "M2AIA_PACKAGE_VERSION=v2023.10.$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          rm -rf m2aia-docker || true
          git clone https://github.com/m2aia/m2aia-docker.git m2aia-docker
      - name: 2. build mitk
        run: |
          docker build \
          -t local/images/mitk/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT} \
          -f m2aia-docker/applications/build-mitk/Dockerfile \
          --build-arg="UBUNTU_VERSION=${UBUNTU_VERSION}" \
          .
      - name: 3. build m2aia
        run: |
          docker build -t local/images/m2aia/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT} \
          --no-cache \
          -f m2aia-docker/applications/build-m2aia/Dockerfile \
          --build-arg DOCKER_IMAGE_MITK_BUILD=local/images/mitk/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT} \
          --build-arg M2AIA_BRANCH=${M2AIA_BRANCH} \
          --build-arg M2AIA_PACKAGE_VERSION=${M2AIA_PACKAGE_VERSION} \
          .
      - name: 4. copy packages
        run: |
          mkdir -p dist || true
          
          docker rm -f m2aia-packages-tmp
          docker run -t -d --name m2aia-packages-tmp local/images/m2aia/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT}
          docker cp m2aia-packages-tmp:/opt/build/MITK-build/M2aia-${M2AIA_PACKAGE_VERSION}-linux-x86_64.tar.gz dist/M2aia-${M2AIA_PACKAGE_VERSION}-Ubuntu${UBUNTU_VERSION}-linux-x86_64.tar.gz
          docker rm -f m2aia-packages-tmp
          
      - name: 5. store packages
        uses: actions/upload-artifact@v3
        with:
          name: "M2aia-${{env.M2AIA_PACKAGE_VERSION}}-Ubuntu${{env.UBUNTU_VERSION}}-linux-x86_64.tar.gz"
          path: dist/M2aia*.tar.gz
      
      - name: 6. cleanup
        run: |
          rm -rf dist || true
          docker rmi local/images/m2aia/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT}


  ubuntu2204:
    # The type of runner that the job will run on
    runs-on: self-hosted
    env:
      UBUNTU_VERSION: 22.04
      M2AIA_BRANCH: master

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Runs a single command using the runners shell
      - name: 1. Clone m2aia-docker
        run: |
          echo "GITHUB_SHA_SHORT=$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          echo "M2AIA_PACKAGE_VERSION=v2023.10.$(echo $GITHUB_SHA | cut -c 1-6)" >> $GITHUB_ENV
          rm -rf m2aia-docker || true
          git clone https://github.com/m2aia/m2aia-docker.git m2aia-docker
      - name: 2. build mitk
        run: |
          docker build \
          -t local/images/mitk/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT} \
          -f m2aia-docker/applications/build-mitk/Dockerfile \
          --build-arg="UBUNTU_VERSION=${UBUNTU_VERSION}" \
          .
      - name: 3. build m2aia
        run: |
          docker build -t local/images/m2aia/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT} \
          --no-cache \
          -f m2aia-docker/applications/build-m2aia/Dockerfile \
          --build-arg DOCKER_IMAGE_MITK_BUILD=local/images/mitk/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT} \
          --build-arg M2AIA_BRANCH=${M2AIA_BRANCH} \
          --build-arg M2AIA_PACKAGE_VERSION=${M2AIA_PACKAGE_VERSION} \
          .
      - name: 4. copy packages
        run: |
          mkdir -p dist || true
          
          docker rm -f m2aia-packages-tmp
          docker run -t -d --name m2aia-packages-tmp local/images/m2aia/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT}
          docker cp m2aia-packages-tmp:/opt/build/MITK-build/M2aia-${M2AIA_PACKAGE_VERSION}-linux-x86_64.tar.gz dist/M2aia-${M2AIA_PACKAGE_VERSION}-Ubuntu${UBUNTU_VERSION}-linux-x86_64.tar.gz
          docker rm -f m2aia-packages-tmp
          
      - name: 5. store packages
        uses: actions/upload-artifact@v3
        with:
          name: "M2aia-${{env.M2AIA_PACKAGE_VERSION}}-Ubuntu${{env.UBUNTU_VERSION}}-linux-x86_64.tar.gz"
          path: dist/M2aia*.tar.gz
      
      - name: 6. cleanup
        run: |
          rm -rf dist || true
          docker rmi local/images/m2aia/build:${UBUNTU_VERSION}-${GITHUB_SHA_SHORT}

#  github-release:
#     name: >-
#        Sign the packages with Sigstore
#        and upload them to GitHub Release
#     needs:
#        - ubuntu2204
#        - ubuntu2004
#     runs-on: ubuntu-latest
     
#     permissions:
#      contents: write  # IMPORTANT: mandatory for making GitHub Releases
#      id-token: write  # IMPORTANT: mandatory for sigstore

#     steps:
#      - name: Download all artifacts
#        uses: actions/download-artifact@v3
#        with:
#          path: dist/
      
#      - name: Display structure of downloaded files
#        run: ls -R
#        working-directory: dist/
      
#      - name: Sign the dists with Sigstore
#        uses: sigstore/gh-action-sigstore-python@v1.2.3
#        with:
#          inputs: >-
#            ./*.tar.gz
#      - name: Upload artifact signatures
#        env:
#          GITHUB_TOKEN: ${{ github.token }}
#        # Upload to GitHub Release using the `gh` CLI.
#        # `dist/` contains the built packages, and the
#        # sigstore-produced signatures and certificates.
#        run: >-
#          gh release create
#          '${{ github.ref_name }}' dist/artifact/**
#          --repo '${{ github.repository }}'
